/*
 * Copyright Soramitsu Co., Ltd. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

package jp.co.soramitsu.soranet.eth.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line
 * tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Master extends Contract {

  public static final String BINARY = "60806040523480156200001157600080fd5b5060405162003ea838038062003ea8833981810160405260808110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81518560208202830111640100000000821117156200008257600080fd5b505092919060200180516401000000008111156200009f57600080fd5b82016020810184811115620000b357600080fd5b8151640100000000811182820187101715620000ce57600080fd5b50509291906020018051640100000000811115620000eb57600080fd5b82016020810184811115620000ff57600080fd5b81516401000000008111828201871017156200011a57600080fd5b505060209091015190925090506200013f33858585856001600160e01b036200014916565b50505050620003b3565b60005460ff16156200015a57600080fd5b60008054610100600160a81b0319166101006001600160a01b038816021781555b84518160ff161015620001ba57620001b0858260ff16815181106200019c57fe5b60200260200101516200034b60201b60201c565b506001016200017b565b506000805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df805460ff191660011790556040518390839083906200020490620003a5565b60ff82166040820152606080825284519082015283518190602080830191608084019188019080838360005b838110156200024a57818101518382015260200162000230565b50505050905090810190601f168015620002785780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015620002ad57818101518382015260200162000293565b50505050905090810190601f168015620002db5780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f08015801562000300573d6000803e3d6000fd5b50600680546001600160a01b0319166001600160a01b039283161790819055166000908152600760205260408120805460ff1990811660019081179092558254161790555050505050565b6001600160a01b03811660009081526001602052604081205460ff16156200037257600080fd5b506001600160a01b03166000908152600160208190526040909120805460ff191682179055600280549091019081905590565b610e0180620030a783390190565b612ce480620003c36000396000f3fe608060405260043610620001165760003560e01c80639f1a156c11620000a3578063c71a46fb116200006d578063c71a46fb146200098b578063ca70cf6e1462000b65578063d48bfca71462000d39578063e76630791462000d70578063eea29e3e1462000d885762000116565b80639f1a156c146200069d578063ae6664e014620006d4578063b07c411f14620006fe578063c1e8ca95146200072c5762000116565b8063658030b311620000e5578063658030b3146200028c5780637874962014620002c057806389c39baf14620004b15780638f32d59b14620006855762000116565b80630e18c290146200012457806319f3736114620001d35780631d345ebb146200021e5780633e44cf781462000255575b36156200012257600080fd5b005b3480156200013157600080fd5b506200015b600480360360208110156200014a57600080fd5b50356001600160a01b031662000f79565b6040805160208082528351818301528351919283929083019185019080838360005b83811015620001975781810151838201526020016200017d565b50505050905090810190601f168015620001c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015620001e057600080fd5b506200020a60048036036020811015620001f957600080fd5b50356001600160a01b031662001018565b604080519115158252519081900360200190f35b3480156200022b57600080fd5b506200020a600480360360208110156200024457600080fd5b50356001600160a01b03166200102d565b3480156200026257600080fd5b506200020a600480360360208110156200027b57600080fd5b50356001600160a01b031662001042565b3480156200029957600080fd5b50620002a462001057565b604080516001600160a01b039092168252519081900360200190f35b348015620002cd57600080fd5b50620001226004803603610100811015620002e757600080fd5b6001600160a01b0382358116926020810135926040820135909216916060820135919081019060a081016080820135600160201b8111156200032857600080fd5b8201836020820111156200033b57600080fd5b803590602001918460208302840111600160201b831117156200035d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620003ad57600080fd5b820183602082011115620003c057600080fd5b803590602001918460208302840111600160201b83111715620003e257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200043257600080fd5b8201836020820111156200044557600080fd5b803590602001918460208302840111600160201b831117156200046757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b03169150620010669050565b348015620004be57600080fd5b506200020a600480360360a0811015620004d757600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156200050757600080fd5b8201836020820111156200051a57600080fd5b803590602001918460208302840111600160201b831117156200053c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200058c57600080fd5b8201836020820111156200059f57600080fd5b803590602001918460208302840111600160201b83111715620005c157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200061157600080fd5b8201836020820111156200062457600080fd5b803590602001918460208302840111600160201b831117156200064657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550620011a4945050505050565b3480156200069257600080fd5b506200020a6200124d565b348015620006aa57600080fd5b506200020a60048036036020811015620006c357600080fd5b50356001600160a01b031662001264565b348015620006e157600080fd5b50620006ec62001282565b60408051918252519081900360200190f35b3480156200070b57600080fd5b506200020a600480360360208110156200072457600080fd5b503562001288565b3480156200073957600080fd5b5062000122600480360360c08110156200075257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156200077d57600080fd5b8201836020820111156200079057600080fd5b803590602001918460018302840111600160201b83111715620007b257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156200080d57600080fd5b8201836020820111156200082057600080fd5b803590602001918460208302840111600160201b831117156200084257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200089257600080fd5b820183602082011115620008a557600080fd5b803590602001918460208302840111600160201b83111715620008c757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200091757600080fd5b8201836020820111156200092a57600080fd5b803590602001918460208302840111600160201b831117156200094c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506200129d945050505050565b3480156200099857600080fd5b5062000122600480360360a0811015620009b157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115620009dc57600080fd5b820183602082011115620009ef57600080fd5b803590602001918460208302840111600160201b8311171562000a1157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000a6157600080fd5b82018360208201111562000a7457600080fd5b803590602001918460018302840111600160201b8311171562000a9657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111562000ae957600080fd5b82018360208201111562000afc57600080fd5b803590602001918460018302840111600160201b8311171562000b1e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150620014969050565b34801562000b7257600080fd5b506200020a600480360360a081101562000b8b57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111562000bbb57600080fd5b82018360208201111562000bce57600080fd5b803590602001918460208302840111600160201b8311171562000bf057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000c4057600080fd5b82018360208201111562000c5357600080fd5b803590602001918460208302840111600160201b8311171562000c7557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000cc557600080fd5b82018360208201111562000cd857600080fd5b803590602001918460208302840111600160201b8311171562000cfa57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955062001692945050505050565b34801562000d4657600080fd5b50620001226004803603602081101562000d5f57600080fd5b50356001600160a01b03166200173c565b34801562000d7d57600080fd5b50620002a46200179b565b34801562000d9557600080fd5b5062000122600480360361010081101562000daf57600080fd5b6001600160a01b0382358116926020810135926040820135909216916060820135919081019060a081016080820135600160201b81111562000df057600080fd5b82018360208201111562000e0357600080fd5b803590602001918460208302840111600160201b8311171562000e2557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000e7557600080fd5b82018360208201111562000e8857600080fd5b803590602001918460208302840111600160201b8311171562000eaa57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111562000efa57600080fd5b82018360208201111562000f0d57600080fd5b803590602001918460208302840111600160201b8311171562000f2f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b03169150620017af9050565b60056020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015620010105780601f1062000fe45761010080835404028352916020019162001010565b820191906000526020600020905b81548152906001019060200180831162000ff257829003601f168201915b505050505081565b60076020526000908152604090205460ff1681565b60046020526000908152604090205460ff1681565b60016020526000908152604090205460ff1681565b6006546001600160a01b031681565b6006546001600160a01b038981169116146200108157600080fd5b60008581526003602052604090205460ff16156200109e57600080fd5b6040805160608a811b6bffffffffffffffffffffffff19908116602080850191909152603484018c90528a831b82166054850152606884018a90529185901b1660888301528251808303607c018152609c9092019092528051910120620011089085858562001a81565b6200111257600080fd5b60065460408051633c37699760e21b81526001600160a01b038981166004830152602482018b90529151919092169163f0dda65c91604480830192600092919082900301818387803b1580156200116857600080fd5b505af11580156200117d573d6000803e3d6000fd5b50505060009586525050600360205250506040909120805460ff1916600117905550505050565b60008481526003602052604081205460ff1615620011c157600080fd5b62001212868660405160200180836001600160a01b03166001600160a01b031660601b8152601401828152602001925050506040516020818303038152906040528051906020012085858562001a81565b6200121c57600080fd5b620012278662001c83565b506000848152600360205260409020805460ff1916600190811790915595945050505050565b60005461010090046001600160a01b031633145b90565b6001600160a01b031660009081526007602052604090205460ff1690565b60025481565b60036020526000908152604090205460ff1681565b60008481526003602052604090205460ff1615620012ba57600080fd5b6200135586868660405160200180846001600160a01b03166001600160a01b031660601b815260140183805190602001908083835b60208310620013105780518252601f199092019160209182019101620012ef565b51815160209384036101000a60001901801990921691161790529201938452506040805180850381529382019052825192019190912092508691508590508462001a81565b6200135f57600080fd5b6001600160a01b03861633146200137557600080fd5b6001600160a01b0386166000908152600560205260409020546002600019610100600184161502019091160415620013ac57600080fd5b6001600160a01b03861660009081526005602090815260409091208651620013d79288019062001dfe565b507f6a70775b447c720635e28c6ecca0cec2b8917a93dc40135739e28dd2299ea5ab868660405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200145257818101518382015260200162001438565b50505050905090810190601f168015620014805780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050505050565b60005460ff1615620014a757600080fd5b60008054610100600160a81b0319166101006001600160a01b038816021781555b84518160ff1610156200150157620014f7858260ff1681518110620014e957fe5b602002602001015162001cda565b50600101620014c8565b506000805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df805460ff191660011790556040518390839083906200154b9062001e83565b60ff82166040820152606080825284519082015283518190602080830191608084019188019080838360005b838110156200159157818101518382015260200162001577565b50505050905090810190601f168015620015bf5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015620015f4578181015183820152602001620015da565b50505050905090810190601f168015620016225780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f08015801562001647573d6000803e3d6000fd5b50600680546001600160a01b0319166001600160a01b039283161790819055166000908152600760205260408120805460ff1990811660019081179092558254161790555050505050565b60008481526003602052604081205460ff1615620016af57600080fd5b62001700868660405160200180836001600160a01b03166001600160a01b031660601b8152601401828152602001925050506040516020818303038152906040528051906020012085858562001a81565b6200170a57600080fd5b620017158662001cda565b50506000848152600360205260409020805460ff1916600190811790915595945050505050565b620017466200124d565b6200175057600080fd5b6001600160a01b03811660009081526007602052604090205460ff16156200177757600080fd5b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b60005461010090046001600160a01b031681565b620017ba8862001264565b620017c457600080fd5b60008581526003602052604090205460ff1615620017e157600080fd5b6040805160608a811b6bffffffffffffffffffffffff19908116602080850191909152603484018c90528a831b82166054850152606884018a90529185901b1660888301528251808303607c018152609c90920190925280519101206200184b9085858562001a81565b6200185557600080fd5b6001600160a01b0388166200190e573031871115620018b957604080516001600160a01b03808b1682528816602082015281517f33d1e0301846de1496df73b1da3d17c85b7266dd832d21e10ff21a1f143ef293929181900390910190a162001908565b600085815260036020526040808220805460ff19166001179055516001600160a01b0388169189156108fc02918a91818181858888f1935050505015801562001906573d6000803e3d6000fd5b505b62001a77565b604080516370a0823160e01b81523060048201529051899189916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156200195957600080fd5b505afa1580156200196e573d6000803e3d6000fd5b505050506040513d60208110156200198557600080fd5b50511015620019d957604080516001600160a01b03808c1682528916602082015281517f33d1e0301846de1496df73b1da3d17c85b7266dd832d21e10ff21a1f143ef293929181900390910190a162001a75565b6000868152600360209081526040808320805460ff19166001179055805163a9059cbb60e01b81526001600160a01b038b81166004830152602482018d905291519185169363a9059cbb9360448084019491939192918390030190829087803b15801562001a4657600080fd5b505af115801562001a5b573d6000803e3d6000fd5b505050506040513d602081101562001a7257600080fd5b50505b505b5050505050505050565b60006001600254101562001a9457600080fd5b825184511462001aa357600080fd5b815183511462001ab257600080fd5b600060036001600254038162001ac457fe5b04600254039050808351101562001ada57600080fd5b60008090506060845160405190808252806020026020018201604052801562001b0d578160200160208202803883390190505b50905060005b855181101562001c1b57600062001b698a8a848151811062001b3157fe5b60200260200101518a858151811062001b4657fe5b60200260200101518a868151811062001b5b57fe5b602002602001015162001d34565b6001600160a01b03811660009081526001602081905260409091205491925060ff909116151514158062001bba57506001600160a01b03811660009081526004602052604090205460ff1615156001145b1562001bc7575062001c12565b8083858151811062001bd557fe5b6001600160a01b0392831660209182029290920181019190915291166000908152600490915260409020805460ff19166001908117909155909201915b60010162001b13565b5060005b8281101562001c765760006004600084848151811062001c3b57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162001c1f565b5050101595945050505050565b6001600160a01b03811660009081526001602081905260409091205460ff1615151462001caf57600080fd5b6001600160a01b03166000908152600160205260409020805460ff1916905560028054600019019055565b6001600160a01b03811660009081526001602052604081205460ff161562001d0157600080fd5b506001600160a01b03166000908152600160208190526040909120805460ff191682179055600280549091019081905590565b6000808560405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801562001de8573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062001e4157805160ff191683800117855562001e71565b8280016001018555821562001e71579182015b8281111562001e7157825182559160200191906001019062001e54565b5062001e7f92915062001e91565b5090565b610e018062001eaf83390190565b6200126191905b8082111562001e7f576000815560010162001e9856fe60806040523480156200001157600080fd5b5060405162000e0138038062000e01833981810160405260608110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b505060209182015185519194509250849184918491620000f19160039186019062000260565b5081516200010790600490602085019062000260565b506005805460ff191660ff9290921691909117610100600160a81b03191661010033810291909117918290556040516001600160a01b0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620001843360006001600160e01b036200018d16565b50505062000305565b6001600160a01b038216620001a157600080fd5b620001bd816002546200024660201b620008901790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001f09183906200089062000246821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156200025957600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a357805160ff1916838001178555620002d3565b82800160010185558215620002d3579182015b82811115620002d3578251825591602001919060010190620002b6565b50620002e1929150620002e5565b5090565b6200030291905b80821115620002e15760008155600101620002ec565b90565b610aec80620003156000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063a457c2d711610071578063a457c2d714610332578063a9059cbb1461035e578063dd62ed3e1461038a578063f0dda65c146103b8578063f2fde38b146103e457610121565b8063715018a6146102ca57806379cc6790146102d25780638da5cb5b146102fe5780638f32d59b1461032257806395d89b411461032a57610121565b80632ff2e9dc116100f45780632ff2e9dc14610233578063313ce5671461023b578063395093511461025957806342966c681461028557806370a08231146102a457610121565b806306fdde0314610126578063095ea7b3146101a357806318160ddd146101e357806323b872dd146101fd575b600080fd5b61012e61040a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360408110156101b957600080fd5b506001600160a01b0381351690602001356104a0565b604080519115158252519081900360200190f35b6101eb6104b6565b60408051918252519081900360200190f35b6101cf6004803603606081101561021357600080fd5b506001600160a01b038135811691602081013590911690604001356104bc565b6101eb610513565b610243610518565b6040805160ff9092168252519081900360200190f35b6101cf6004803603604081101561026f57600080fd5b506001600160a01b038135169060200135610521565b6102a26004803603602081101561029b57600080fd5b503561055d565b005b6101eb600480360360208110156102ba57600080fd5b50356001600160a01b031661056a565b6102a2610585565b6102a2600480360360408110156102e857600080fd5b506001600160a01b0381351690602001356105e6565b6103066105f4565b604080516001600160a01b039092168252519081900360200190f35b6101cf610608565b61012e61061e565b6101cf6004803603604081101561034857600080fd5b506001600160a01b03813516906020013561067f565b6101cf6004803603604081101561037457600080fd5b506001600160a01b0381351690602001356106bb565b6101eb600480360360408110156103a057600080fd5b506001600160a01b03813581169160200135166106c8565b6102a2600480360360408110156103ce57600080fd5b506001600160a01b0381351690602001356106f3565b6102a2600480360360208110156103fa57600080fd5b50356001600160a01b031661070e565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505050905090565b60006104ad338484610728565b50600192915050565b60025490565b60006104c98484846107b0565b6001600160a01b038416600090815260016020908152604080832033808552925290912054610509918691610504908663ffffffff61087b16565b610728565b5060019392505050565b600081565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61089016565b61056733826108a9565b50565b6001600160a01b031660009081526020819052604090205490565b61058d610608565b61059657600080fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6105f08282610950565b5050565b60055461010090046001600160a01b031690565b60055461010090046001600160a01b0316331490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61087b16565b60006104ad3384846107b0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106fb610608565b61070457600080fd5b6105f08282610995565b610716610608565b61071f57600080fd5b61056781610a3d565b6001600160a01b03821661073b57600080fd5b6001600160a01b03831661074e57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166107c357600080fd5b6001600160a01b0383166000908152602081905260409020546107ec908263ffffffff61087b16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610821908263ffffffff61089016565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561088a57600080fd5b50900390565b6000828201838110156108a257600080fd5b9392505050565b6001600160a01b0382166108bc57600080fd5b6002546108cf908263ffffffff61087b16565b6002556001600160a01b0382166000908152602081905260409020546108fb908263ffffffff61087b16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b61095a82826108a9565b6001600160a01b0382166000908152600160209081526040808320338085529252909120546105f0918491610504908563ffffffff61087b16565b6001600160a01b0382166109a857600080fd5b6002546109bb908263ffffffff61089016565b6002556001600160a01b0382166000908152602081905260409020546109e7908263ffffffff61089016565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610a5057600080fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b031990921691909117905556fea265627a7a723058202eaf3ae41dc960a862fa177d6a8d83244bc9cb94a5d219db5c50afbb9ba3d79764736f6c63430005090032a265627a7a72305820b303eb7d1e3a4808bd0d197800d0cb72528ed50403b8d344c8b35ee40f4cbbfd64736f6c6343000509003260806040523480156200001157600080fd5b5060405162000e0138038062000e01833981810160405260608110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b505060209182015185519194509250849184918491620000f19160039186019062000260565b5081516200010790600490602085019062000260565b506005805460ff191660ff9290921691909117610100600160a81b03191661010033810291909117918290556040516001600160a01b0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620001843360006001600160e01b036200018d16565b50505062000305565b6001600160a01b038216620001a157600080fd5b620001bd816002546200024660201b620008901790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620001f09183906200089062000246821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156200025957600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a357805160ff1916838001178555620002d3565b82800160010185558215620002d3579182015b82811115620002d3578251825591602001919060010190620002b6565b50620002e1929150620002e5565b5090565b6200030291905b80821115620002e15760008155600101620002ec565b90565b610aec80620003156000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063a457c2d711610071578063a457c2d714610332578063a9059cbb1461035e578063dd62ed3e1461038a578063f0dda65c146103b8578063f2fde38b146103e457610121565b8063715018a6146102ca57806379cc6790146102d25780638da5cb5b146102fe5780638f32d59b1461032257806395d89b411461032a57610121565b80632ff2e9dc116100f45780632ff2e9dc14610233578063313ce5671461023b578063395093511461025957806342966c681461028557806370a08231146102a457610121565b806306fdde0314610126578063095ea7b3146101a357806318160ddd146101e357806323b872dd146101fd575b600080fd5b61012e61040a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cf600480360360408110156101b957600080fd5b506001600160a01b0381351690602001356104a0565b604080519115158252519081900360200190f35b6101eb6104b6565b60408051918252519081900360200190f35b6101cf6004803603606081101561021357600080fd5b506001600160a01b038135811691602081013590911690604001356104bc565b6101eb610513565b610243610518565b6040805160ff9092168252519081900360200190f35b6101cf6004803603604081101561026f57600080fd5b506001600160a01b038135169060200135610521565b6102a26004803603602081101561029b57600080fd5b503561055d565b005b6101eb600480360360208110156102ba57600080fd5b50356001600160a01b031661056a565b6102a2610585565b6102a2600480360360408110156102e857600080fd5b506001600160a01b0381351690602001356105e6565b6103066105f4565b604080516001600160a01b039092168252519081900360200190f35b6101cf610608565b61012e61061e565b6101cf6004803603604081101561034857600080fd5b506001600160a01b03813516906020013561067f565b6101cf6004803603604081101561037457600080fd5b506001600160a01b0381351690602001356106bb565b6101eb600480360360408110156103a057600080fd5b506001600160a01b03813581169160200135166106c8565b6102a2600480360360408110156103ce57600080fd5b506001600160a01b0381351690602001356106f3565b6102a2600480360360208110156103fa57600080fd5b50356001600160a01b031661070e565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505050905090565b60006104ad338484610728565b50600192915050565b60025490565b60006104c98484846107b0565b6001600160a01b038416600090815260016020908152604080832033808552925290912054610509918691610504908663ffffffff61087b16565b610728565b5060019392505050565b600081565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61089016565b61056733826108a9565b50565b6001600160a01b031660009081526020819052604090205490565b61058d610608565b61059657600080fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6105f08282610950565b5050565b60055461010090046001600160a01b031690565b60055461010090046001600160a01b0316331490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104965780601f1061046b57610100808354040283529160200191610496565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ad918590610504908663ffffffff61087b16565b60006104ad3384846107b0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6106fb610608565b61070457600080fd5b6105f08282610995565b610716610608565b61071f57600080fd5b61056781610a3d565b6001600160a01b03821661073b57600080fd5b6001600160a01b03831661074e57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0382166107c357600080fd5b6001600160a01b0383166000908152602081905260409020546107ec908263ffffffff61087b16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610821908263ffffffff61089016565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561088a57600080fd5b50900390565b6000828201838110156108a257600080fd5b9392505050565b6001600160a01b0382166108bc57600080fd5b6002546108cf908263ffffffff61087b16565b6002556001600160a01b0382166000908152602081905260409020546108fb908263ffffffff61087b16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b61095a82826108a9565b6001600160a01b0382166000908152600160209081526040808320338085529252909120546105f0918491610504908563ffffffff61087b16565b6001600160a01b0382166109a857600080fd5b6002546109bb908263ffffffff61089016565b6002556001600160a01b0382166000908152602081905260409020546109e7908263ffffffff61089016565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610a5057600080fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b031990921691909117905556fea265627a7a723058202eaf3ae41dc960a862fa177d6a8d83244bc9cb94a5d219db5c50afbb9ba3d79764736f6c63430005090032";

  public static final String FUNC_REGISTEREDCLIENTS = "registeredClients";

  public static final String FUNC_ISTOKEN = "isToken";

  public static final String FUNC_UNIQUEADDRESSES = "uniqueAddresses";

  public static final String FUNC_ISPEER = "isPeer";

  public static final String FUNC_TOKENINSTANCE = "tokenInstance";

  public static final String FUNC_MINTTOKENSBYPEERS = "mintTokensByPeers";

  public static final String FUNC_REMOVEPEERBYPEER = "removePeerByPeer";

  public static final String FUNC_ISOWNER = "isOwner";

  public static final String FUNC_CHECKTOKENADDRESS = "checkTokenAddress";

  public static final String FUNC_PEERSCOUNT = "peersCount";

  public static final String FUNC_USED = "used";

  public static final String FUNC_REGISTER = "register";

  public static final String FUNC_INITIALIZE = "initialize";

  public static final String FUNC_ADDPEERBYPEER = "addPeerByPeer";

  public static final String FUNC_ADDTOKEN = "addToken";

  public static final String FUNC_OWNER_ = "owner_";

  public static final String FUNC_WITHDRAW = "withdraw";

  public static final Event IROHAACCOUNTREGISTRATION_EVENT = new Event("IrohaAccountRegistration",
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
      }, new TypeReference<DynamicBytes>() {
      }));
  ;

  public static final Event INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT = new Event(
      "InsufficientFundsForWithdrawal",
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
      }, new TypeReference<Address>() {
      }));
  ;

  @Deprecated
  protected Master(String contractAddress, Web3j web3j, Credentials credentials,
      BigInteger gasPrice, BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
  }

  protected Master(String contractAddress, Web3j web3j, Credentials credentials,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }

  @Deprecated
  protected Master(String contractAddress, Web3j web3j, TransactionManager transactionManager,
      BigInteger gasPrice, BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }

  protected Master(String contractAddress, Web3j web3j, TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
  }

  @Deprecated
  public static Master load(String contractAddress, Web3j web3j, Credentials credentials,
      BigInteger gasPrice, BigInteger gasLimit) {
    return new Master(contractAddress, web3j, credentials, gasPrice, gasLimit);
  }

  @Deprecated
  public static Master load(String contractAddress, Web3j web3j,
      TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
    return new Master(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }

  public static Master load(String contractAddress, Web3j web3j, Credentials credentials,
      ContractGasProvider contractGasProvider) {
    return new Master(contractAddress, web3j, credentials, contractGasProvider);
  }

  public static Master load(String contractAddress, Web3j web3j,
      TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
    return new Master(contractAddress, web3j, transactionManager, contractGasProvider);
  }

  public static RemoteCall<Master> deploy(Web3j web3j, Credentials credentials,
      ContractGasProvider contractGasProvider, List<String> initialPeers, String name,
      String symbol, BigInteger decimals) {
    String encodedConstructor = FunctionEncoder
        .encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(initialPeers, Address.class)),
            new org.web3j.abi.datatypes.Utf8String(name),
            new org.web3j.abi.datatypes.Utf8String(symbol),
            new org.web3j.abi.datatypes.generated.Uint8(decimals)));
    return deployRemoteCall(Master.class, web3j, credentials, contractGasProvider, BINARY,
        encodedConstructor);
  }

  public static RemoteCall<Master> deploy(Web3j web3j, TransactionManager transactionManager,
      ContractGasProvider contractGasProvider, List<String> initialPeers, String name,
      String symbol, BigInteger decimals) {
    String encodedConstructor = FunctionEncoder
        .encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(initialPeers, Address.class)),
            new org.web3j.abi.datatypes.Utf8String(name),
            new org.web3j.abi.datatypes.Utf8String(symbol),
            new org.web3j.abi.datatypes.generated.Uint8(decimals)));
    return deployRemoteCall(Master.class, web3j, transactionManager, contractGasProvider, BINARY,
        encodedConstructor);
  }

  @Deprecated
  public static RemoteCall<Master> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
      BigInteger gasLimit, List<String> initialPeers, String name, String symbol,
      BigInteger decimals) {
    String encodedConstructor = FunctionEncoder
        .encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(initialPeers, Address.class)),
            new org.web3j.abi.datatypes.Utf8String(name),
            new org.web3j.abi.datatypes.Utf8String(symbol),
            new org.web3j.abi.datatypes.generated.Uint8(decimals)));
    return deployRemoteCall(Master.class, web3j, credentials, gasPrice, gasLimit, BINARY,
        encodedConstructor);
  }

  @Deprecated
  public static RemoteCall<Master> deploy(Web3j web3j, TransactionManager transactionManager,
      BigInteger gasPrice, BigInteger gasLimit, List<String> initialPeers, String name,
      String symbol, BigInteger decimals) {
    String encodedConstructor = FunctionEncoder
        .encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(initialPeers, Address.class)),
            new org.web3j.abi.datatypes.Utf8String(name),
            new org.web3j.abi.datatypes.Utf8String(symbol),
            new org.web3j.abi.datatypes.generated.Uint8(decimals)));
    return deployRemoteCall(Master.class, web3j, transactionManager, gasPrice, gasLimit, BINARY,
        encodedConstructor);
  }

  public RemoteFunctionCall<byte[]> registeredClients(String param0) {
    final Function function = new Function(FUNC_REGISTEREDCLIENTS,
        Arrays.<Type>asList(new Address(160, param0)),
        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {
        }));
    return executeRemoteCallSingleValueReturn(function, byte[].class);
  }

  public RemoteFunctionCall<Boolean> isToken(String param0) {
    final Function function = new Function(FUNC_ISTOKEN,
        Arrays.<Type>asList(new Address(160, param0)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<Boolean> uniqueAddresses(String param0) {
    final Function function = new Function(FUNC_UNIQUEADDRESSES,
        Arrays.<Type>asList(new Address(160, param0)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<Boolean> isPeer(String param0) {
    final Function function = new Function(FUNC_ISPEER,
        Arrays.<Type>asList(new Address(160, param0)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<String> tokenInstance() {
    final Function function = new Function(FUNC_TOKENINSTANCE,
        Arrays.<Type>asList(),
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<TransactionReceipt> mintTokensByPeers(String tokenAddress,
      BigInteger amount, String beneficiary, byte[] txHash, List<BigInteger> v, List<byte[]> r,
      List<byte[]> s, String from) {
    final Function function = new Function(
        FUNC_MINTTOKENSBYPEERS,
        Arrays.<Type>asList(new Address(160, tokenAddress),
            new Uint256(amount),
            new Address(160, beneficiary),
            new org.web3j.abi.datatypes.generated.Bytes32(txHash),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                org.web3j.abi.datatypes.generated.Uint8.class,
                org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class)),
            new Address(160, from)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> removePeerByPeer(String peerAddress, byte[] txHash,
      List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
    final Function function = new Function(
        FUNC_REMOVEPEERBYPEER,
        Arrays.<Type>asList(new Address(160, peerAddress),
            new org.web3j.abi.datatypes.generated.Bytes32(txHash),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                org.web3j.abi.datatypes.generated.Uint8.class,
                org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<Boolean> isOwner() {
    final Function function = new Function(FUNC_ISOWNER,
        Arrays.<Type>asList(),
        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<Boolean> checkTokenAddress(String tokenAddress) {
    final Function function = new Function(FUNC_CHECKTOKENADDRESS,
        Arrays.<Type>asList(new Address(160, tokenAddress)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<BigInteger> peersCount() {
    final Function function = new Function(FUNC_PEERSCOUNT,
        Arrays.<Type>asList(),
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteFunctionCall<Boolean> used(byte[] param0) {
    final Function function = new Function(FUNC_USED,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<TransactionReceipt> register(String clientEthereumAddress,
      byte[] clientIrohaAccountId, byte[] txHash, List<BigInteger> v, List<byte[]> r,
      List<byte[]> s) {
    final Function function = new Function(
        FUNC_REGISTER,
        Arrays.<Type>asList(new Address(160, clientEthereumAddress),
            new DynamicBytes(clientIrohaAccountId),
            new org.web3j.abi.datatypes.generated.Bytes32(txHash),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                org.web3j.abi.datatypes.generated.Uint8.class,
                org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> initialize(String owner, List<String> initialPeers,
      String name, String symbol, BigInteger decimals) {
    final Function function = new Function(
        FUNC_INITIALIZE,
        Arrays.<Type>asList(new Address(160, owner),
            new org.web3j.abi.datatypes.DynamicArray<Address>(
                Address.class,
                org.web3j.abi.Utils.typeMap(initialPeers, Address.class)),
            new org.web3j.abi.datatypes.Utf8String(name),
            new org.web3j.abi.datatypes.Utf8String(symbol),
            new org.web3j.abi.datatypes.generated.Uint8(decimals)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> addPeerByPeer(String newPeerAddress, byte[] txHash,
      List<BigInteger> v, List<byte[]> r, List<byte[]> s) {
    final Function function = new Function(
        FUNC_ADDPEERBYPEER,
        Arrays.<Type>asList(new Address(160, newPeerAddress),
            new org.web3j.abi.datatypes.generated.Bytes32(txHash),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                org.web3j.abi.datatypes.generated.Uint8.class,
                org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class))),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> addToken(String newToken) {
    final Function function = new Function(
        FUNC_ADDTOKEN,
        Arrays.<Type>asList(new Address(160, newToken)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<String> owner_() {
    final Function function = new Function(FUNC_OWNER_,
        Arrays.<Type>asList(),
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<TransactionReceipt> withdraw(String tokenAddress, BigInteger amount,
      String to, byte[] txHash, List<BigInteger> v, List<byte[]> r, List<byte[]> s, String from) {
    final Function function = new Function(
        FUNC_WITHDRAW,
        Arrays.<Type>asList(new Address(160, tokenAddress),
            new Uint256(amount),
            new Address(160, to),
            new org.web3j.abi.datatypes.generated.Bytes32(txHash),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint8>(
                org.web3j.abi.datatypes.generated.Uint8.class,
                org.web3j.abi.Utils.typeMap(v, org.web3j.abi.datatypes.generated.Uint8.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Bytes32.class)),
            new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                org.web3j.abi.datatypes.generated.Bytes32.class,
                org.web3j.abi.Utils.typeMap(s, org.web3j.abi.datatypes.generated.Bytes32.class)),
            new Address(160, from)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public List<IrohaAccountRegistrationEventResponse> getIrohaAccountRegistrationEvents(
      TransactionReceipt transactionReceipt) {
    List<EventValuesWithLog> valueList = extractEventParametersWithLog(
        IROHAACCOUNTREGISTRATION_EVENT, transactionReceipt);
    ArrayList<IrohaAccountRegistrationEventResponse> responses = new ArrayList<IrohaAccountRegistrationEventResponse>(
        valueList.size());
    for (EventValuesWithLog eventValues : valueList) {
      IrohaAccountRegistrationEventResponse typedResponse = new IrohaAccountRegistrationEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.ethereumAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.accountId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<IrohaAccountRegistrationEventResponse> irohaAccountRegistrationEventFlowable(
      EthFilter filter) {
    return web3j.ethLogFlowable(filter)
        .map(new io.reactivex.functions.Function<Log, IrohaAccountRegistrationEventResponse>() {
          @Override
          public IrohaAccountRegistrationEventResponse apply(Log log) {
            EventValuesWithLog eventValues = extractEventParametersWithLog(
                IROHAACCOUNTREGISTRATION_EVENT, log);
            IrohaAccountRegistrationEventResponse typedResponse = new IrohaAccountRegistrationEventResponse();
            typedResponse.log = log;
            typedResponse.ethereumAddress = (String) eventValues.getNonIndexedValues().get(0)
                .getValue();
            typedResponse.accountId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            return typedResponse;
          }
        });
  }

  public Flowable<IrohaAccountRegistrationEventResponse> irohaAccountRegistrationEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(IROHAACCOUNTREGISTRATION_EVENT));
    return irohaAccountRegistrationEventFlowable(filter);
  }

  public List<InsufficientFundsForWithdrawalEventResponse> getInsufficientFundsForWithdrawalEvents(
      TransactionReceipt transactionReceipt) {
    List<EventValuesWithLog> valueList = extractEventParametersWithLog(
        INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT, transactionReceipt);
    ArrayList<InsufficientFundsForWithdrawalEventResponse> responses = new ArrayList<InsufficientFundsForWithdrawalEventResponse>(
        valueList.size());
    for (EventValuesWithLog eventValues : valueList) {
      InsufficientFundsForWithdrawalEventResponse typedResponse = new InsufficientFundsForWithdrawalEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.asset = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<InsufficientFundsForWithdrawalEventResponse> insufficientFundsForWithdrawalEventFlowable(
      EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(
        new io.reactivex.functions.Function<Log, InsufficientFundsForWithdrawalEventResponse>() {
          @Override
          public InsufficientFundsForWithdrawalEventResponse apply(Log log) {
            EventValuesWithLog eventValues = extractEventParametersWithLog(
                INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT, log);
            InsufficientFundsForWithdrawalEventResponse typedResponse = new InsufficientFundsForWithdrawalEventResponse();
            typedResponse.log = log;
            typedResponse.asset = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
            return typedResponse;
          }
        });
  }

  public Flowable<InsufficientFundsForWithdrawalEventResponse> insufficientFundsForWithdrawalEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(INSUFFICIENTFUNDSFORWITHDRAWAL_EVENT));
    return insufficientFundsForWithdrawalEventFlowable(filter);
  }

  public static class IrohaAccountRegistrationEventResponse extends BaseEventResponse {

    public String ethereumAddress;

    public byte[] accountId;
  }

  public static class InsufficientFundsForWithdrawalEventResponse extends BaseEventResponse {

    public String asset;

    public String recipient;
  }
}
